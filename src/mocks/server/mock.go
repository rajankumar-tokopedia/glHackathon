// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/glHackathon/src/interfaces/server (interfaces: HttpServer)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	server "github.com/rajankumar549/glHackathon/src/interfaces/server"
	http "net/http"
	reflect "reflect"
)

// MockHttpServer is a mock of HttpServer interface
type MockHttpServer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServerMockRecorder
}

// MockHttpServerMockRecorder is the mock recorder for MockHttpServer
type MockHttpServerMockRecorder struct {
	mock *MockHttpServer
}

// NewMockHttpServer creates a new mock instance
func NewMockHttpServer(ctrl *gomock.Controller) *MockHttpServer {
	mock := &MockHttpServer{ctrl: ctrl}
	mock.recorder = &MockHttpServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpServer) EXPECT() *MockHttpServerMockRecorder {
	return m.recorder
}

// AddMiddleware mocks base method
func (m *MockHttpServer) AddMiddleware(arg0 server.HttpMiddleware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMiddleware", arg0)
}

// AddMiddleware indicates an expected call of AddMiddleware
func (mr *MockHttpServerMockRecorder) AddMiddleware(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMiddleware", reflect.TypeOf((*MockHttpServer)(nil).AddMiddleware), arg0)
}

// DELETE mocks base method
func (m *MockHttpServer) DELETE(arg0 string, arg1 server.HttpHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DELETE", arg0, arg1)
}

// DELETE indicates an expected call of DELETE
func (mr *MockHttpServerMockRecorder) DELETE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockHttpServer)(nil).DELETE), arg0, arg1)
}

// GET mocks base method
func (m *MockHttpServer) GET(arg0 string, arg1 server.HttpHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GET", arg0, arg1)
}

// GET indicates an expected call of GET
func (mr *MockHttpServerMockRecorder) GET(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHttpServer)(nil).GET), arg0, arg1)
}

// OPTIONS mocks base method
func (m *MockHttpServer) OPTIONS(arg0 string, arg1 server.HttpHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OPTIONS", arg0, arg1)
}

// OPTIONS indicates an expected call of OPTIONS
func (mr *MockHttpServerMockRecorder) OPTIONS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockHttpServer)(nil).OPTIONS), arg0, arg1)
}

// POST mocks base method
func (m *MockHttpServer) POST(arg0 string, arg1 server.HttpHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "POST", arg0, arg1)
}

// POST indicates an expected call of POST
func (mr *MockHttpServerMockRecorder) POST(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHttpServer)(nil).POST), arg0, arg1)
}

// PUT mocks base method
func (m *MockHttpServer) PUT(arg0 string, arg1 server.HttpHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PUT", arg0, arg1)
}

// PUT indicates an expected call of PUT
func (mr *MockHttpServerMockRecorder) PUT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHttpServer)(nil).PUT), arg0, arg1)
}

// ServeFiles mocks base method
func (m *MockHttpServer) ServeFiles(arg0 string, arg1 http.FileSystem) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeFiles", arg0, arg1)
}

// ServeFiles indicates an expected call of ServeFiles
func (mr *MockHttpServerMockRecorder) ServeFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeFiles", reflect.TypeOf((*MockHttpServer)(nil).ServeFiles), arg0, arg1)
}

// ServeHTTP mocks base method
func (m *MockHttpServer) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockHttpServerMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHttpServer)(nil).ServeHTTP), arg0, arg1)
}

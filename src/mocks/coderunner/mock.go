// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/glHackathon/src/interfaces/coderunner (interfaces: IDE)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/rajankumar549/glHackathon/src/interfaces/model"
	reflect "reflect"
)

// MockIDE is a mock of IDE interface
type MockIDE struct {
	ctrl     *gomock.Controller
	recorder *MockIDEMockRecorder
}

// MockIDEMockRecorder is the mock recorder for MockIDE
type MockIDEMockRecorder struct {
	mock *MockIDE
}

// NewMockIDE creates a new mock instance
func NewMockIDE(ctrl *gomock.Controller) *MockIDE {
	mock := &MockIDE{ctrl: ctrl}
	mock.recorder = &MockIDEMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDE) EXPECT() *MockIDEMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockIDE) Run(arg0 context.Context, arg1 string, arg2 model.TestCase) (float32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run
func (mr *MockIDEMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIDE)(nil).Run), arg0, arg1, arg2)
}

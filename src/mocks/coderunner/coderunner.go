// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/glHackathon/src/interfaces/coderunner (interfaces: CodeRunner)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	coderunner "github.com/rajankumar549/glHackathon/src/interfaces/coderunner"
	reflect "reflect"
)

// MockCodeRunner is a mock of CodeRunner interface
type MockCodeRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCodeRunnerMockRecorder
}

// MockCodeRunnerMockRecorder is the mock recorder for MockCodeRunner
type MockCodeRunnerMockRecorder struct {
	mock *MockCodeRunner
}

// NewMockCodeRunner creates a new mock instance
func NewMockCodeRunner(ctrl *gomock.Controller) *MockCodeRunner {
	mock := &MockCodeRunner{ctrl: ctrl}
	mock.recorder = &MockCodeRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeRunner) EXPECT() *MockCodeRunnerMockRecorder {
	return m.recorder
}

// GetIDE mocks base method
func (m *MockCodeRunner) GetIDE(arg0 context.Context, arg1 string) (coderunner.IDE, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDE", arg0, arg1)
	ret0, _ := ret[0].(coderunner.IDE)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDE indicates an expected call of GetIDE
func (mr *MockCodeRunnerMockRecorder) GetIDE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDE", reflect.TypeOf((*MockCodeRunner)(nil).GetIDE), arg0, arg1)
}

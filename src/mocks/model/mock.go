// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/glHackathon/src/interfaces/model (interfaces: Model)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/rajankumar549/glHackathon/src/interfaces/model"
	reflect "reflect"
)

// MockModel is a mock of Model interface
type MockModel struct {
	ctrl     *gomock.Controller
	recorder *MockModelMockRecorder
}

// MockModelMockRecorder is the mock recorder for MockModel
type MockModelMockRecorder struct {
	mock *MockModel
}

// NewMockModel creates a new mock instance
func NewMockModel(ctrl *gomock.Controller) *MockModel {
	mock := &MockModel{ctrl: ctrl}
	mock.recorder = &MockModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModel) EXPECT() *MockModelMockRecorder {
	return m.recorder
}

// GetEventProblemsByGroupId mocks base method
func (m *MockModel) GetEventProblemsByGroupId(arg0 context.Context, arg1, arg2, arg3 int64) ([]model.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventProblemsByGroupId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]model.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventProblemsByGroupId indicates an expected call of GetEventProblemsByGroupId
func (mr *MockModelMockRecorder) GetEventProblemsByGroupId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventProblemsByGroupId", reflect.TypeOf((*MockModel)(nil).GetEventProblemsByGroupId), arg0, arg1, arg2, arg3)
}

// GetLeaders mocks base method
func (m *MockModel) GetLeaders(arg0 context.Context, arg1, arg2 int64) ([]model.Leader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeaders", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Leader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeaders indicates an expected call of GetLeaders
func (mr *MockModelMockRecorder) GetLeaders(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeaders", reflect.TypeOf((*MockModel)(nil).GetLeaders), arg0, arg1, arg2)
}

// GetSubmission mocks base method
func (m *MockModel) GetSubmission(arg0 context.Context, arg1, arg2 int64) ([]model.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmission", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmission indicates an expected call of GetSubmission
func (mr *MockModelMockRecorder) GetSubmission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmission", reflect.TypeOf((*MockModel)(nil).GetSubmission), arg0, arg1, arg2)
}

// InsertSubmission mocks base method
func (m *MockModel) InsertSubmission(arg0 context.Context, arg1 model.Submission) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSubmission", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSubmission indicates an expected call of InsertSubmission
func (mr *MockModelMockRecorder) InsertSubmission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSubmission", reflect.TypeOf((*MockModel)(nil).InsertSubmission), arg0, arg1)
}

// UpdateSubmission mocks base method
func (m *MockModel) UpdateSubmission(arg0 context.Context, arg1 int64, arg2 float32, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubmission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubmission indicates an expected call of UpdateSubmission
func (mr *MockModelMockRecorder) UpdateSubmission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubmission", reflect.TypeOf((*MockModel)(nil).UpdateSubmission), arg0, arg1, arg2, arg3)
}
